2、输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，
例如，如果输入如下矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.
 class Solution {
public:
    vector<int> printMatrix(vector<vector<int> > matrix) 
    {
        int start=0; 
        int col=matrix[0].size();
        int row=matrix.size();
          int endx=col-1-start;
          int endy=row-1-start;
           
        vector<int> tmp;
       //左上角的数  开始（0，0），（1，1）；
        
       
        while(col>start*2&&row>start*2)
      {
            int endx=col-1-start;
          int endy=row-1-start;
           //从左向右打印
        for(int i=start;i<=endx;++i)
            tmp.push_back(matrix[start][i]);
        //从上到下打印
        if(start<endy)
         {
             for(int i=start+1;i<=endy;++i)
              tmp.push_back(matrix[i][endx]); 
        }
        //从右向左打印
        if(start<endx&&start<endy)
         {
          for(int i=endx-1;i>=start;--i)
              tmp.push_back(matrix[endy][i]);
        }
        //从下到上打印
        if(start<endx&&start<endy-1)
        {
            for(int i=endy-1;i>=start+1;--i)
                tmp.push_back(matrix[i][start]);
        }
        
            ++start;
     }
        return tmp; 
      
    }
};
//反向打印单链表
#include<iostream>
using namespace std;
struct ListNode
{
	int val;
    ListNode *next;
	ListNode(int x) 
		:val(x), next(NULL)
	{}
};
void print(ListNode* head)
{
	if (head != NULL)
	{
		if (head->next != NULL)
		{
			print(head->next);
		}
		printf("%d  ", head->val);
	}
}
ListNode* _BuyNode(int x)
{
	ListNode *temp = (ListNode*)malloc(sizeof(ListNode));
	temp->val = x;
	temp->next = NULL;
	return temp;
}
void PushBack(ListNode* &pHead, int x)
{
	//1 空   2  不为空
	if (pHead == NULL)
	{
		pHead =new ListNode(x);
	}
	else
	{
		ListNode *tail = pHead;
		while (tail->next != NULL)
		{
			tail = tail->next;
		}
		tail->next = _BuyNode(x);
	}
 }

int main()
{
	ListNode* s = NULL;
	PushBack(s, 5);
	PushBack(s, 6);
	PushBack(s, 7);
	PushBack(s, 8);
	PushBack(s, 9);
	PushBack(s, 1);
	print(s);
	system("pause");
	return 0;
}
